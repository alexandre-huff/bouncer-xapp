// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_rc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_rc_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_rc_2eproto;
namespace oran {
class kpm_per_ue;
struct kpm_per_ueDefaultTypeInternal;
extern kpm_per_ueDefaultTypeInternal _kpm_per_ue_default_instance_;
class rc_per_ue;
struct rc_per_ueDefaultTypeInternal;
extern rc_per_ueDefaultTypeInternal _rc_per_ue_default_instance_;
class service_message;
struct service_messageDefaultTypeInternal;
extern service_messageDefaultTypeInternal _service_message_default_instance_;
}  // namespace oran
PROTOBUF_NAMESPACE_OPEN
template <>
::oran::kpm_per_ue* Arena::CreateMaybeMessage<::oran::kpm_per_ue>(Arena*);
template <>
::oran::rc_per_ue* Arena::CreateMaybeMessage<::oran::rc_per_ue>(Arena*);
template <>
::oran::service_message* Arena::CreateMaybeMessage<::oran::service_message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace oran {

// ===================================================================


// -------------------------------------------------------------------

class service_message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oran.service_message) */ {
 public:
  inline service_message() : service_message(nullptr) {}
  ~service_message() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR service_message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  service_message(const service_message& from);
  service_message(service_message&& from) noexcept
    : service_message() {
    *this = ::std::move(from);
  }

  inline service_message& operator=(const service_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline service_message& operator=(service_message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const service_message& default_instance() {
    return *internal_default_instance();
  }
  static inline const service_message* internal_default_instance() {
    return reinterpret_cast<const service_message*>(
               &_service_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(service_message& a, service_message& b) {
    a.Swap(&b);
  }
  inline void Swap(service_message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(service_message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  service_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<service_message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const service_message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const service_message& from) {
    service_message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(service_message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "oran.service_message";
  }
  protected:
  explicit service_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeMaxPrbAllocationsFieldNumber = 2,
    kUeKpbMetricsFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated .oran.rc_per_ue ue_max_prb_allocations = 2;
  int ue_max_prb_allocations_size() const;
  private:
  int _internal_ue_max_prb_allocations_size() const;

  public:
  void clear_ue_max_prb_allocations() ;
  ::oran::rc_per_ue* mutable_ue_max_prb_allocations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oran::rc_per_ue >*
      mutable_ue_max_prb_allocations();
  private:
  const ::oran::rc_per_ue& _internal_ue_max_prb_allocations(int index) const;
  ::oran::rc_per_ue* _internal_add_ue_max_prb_allocations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::oran::rc_per_ue>& _internal_ue_max_prb_allocations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::oran::rc_per_ue>* _internal_mutable_ue_max_prb_allocations();
  public:
  const ::oran::rc_per_ue& ue_max_prb_allocations(int index) const;
  ::oran::rc_per_ue* add_ue_max_prb_allocations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oran::rc_per_ue >&
      ue_max_prb_allocations() const;
  // repeated .oran.kpm_per_ue ue_kpb_metrics = 3;
  int ue_kpb_metrics_size() const;
  private:
  int _internal_ue_kpb_metrics_size() const;

  public:
  void clear_ue_kpb_metrics() ;
  ::oran::kpm_per_ue* mutable_ue_kpb_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oran::kpm_per_ue >*
      mutable_ue_kpb_metrics();
  private:
  const ::oran::kpm_per_ue& _internal_ue_kpb_metrics(int index) const;
  ::oran::kpm_per_ue* _internal_add_ue_kpb_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::oran::kpm_per_ue>& _internal_ue_kpb_metrics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::oran::kpm_per_ue>* _internal_mutable_ue_kpb_metrics();
  public:
  const ::oran::kpm_per_ue& ue_kpb_metrics(int index) const;
  ::oran::kpm_per_ue* add_ue_kpb_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oran::kpm_per_ue >&
      ue_kpb_metrics() const;
  // int32 type = 1;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:oran.service_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oran::rc_per_ue > ue_max_prb_allocations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oran::kpm_per_ue > ue_kpb_metrics_;
    ::int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rc_2eproto;
};// -------------------------------------------------------------------

class rc_per_ue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oran.rc_per_ue) */ {
 public:
  inline rc_per_ue() : rc_per_ue(nullptr) {}
  ~rc_per_ue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR rc_per_ue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  rc_per_ue(const rc_per_ue& from);
  rc_per_ue(rc_per_ue&& from) noexcept
    : rc_per_ue() {
    *this = ::std::move(from);
  }

  inline rc_per_ue& operator=(const rc_per_ue& from) {
    CopyFrom(from);
    return *this;
  }
  inline rc_per_ue& operator=(rc_per_ue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const rc_per_ue& default_instance() {
    return *internal_default_instance();
  }
  static inline const rc_per_ue* internal_default_instance() {
    return reinterpret_cast<const rc_per_ue*>(
               &_rc_per_ue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(rc_per_ue& a, rc_per_ue& b) {
    a.Swap(&b);
  }
  inline void Swap(rc_per_ue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rc_per_ue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  rc_per_ue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<rc_per_ue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const rc_per_ue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const rc_per_ue& from) {
    rc_per_ue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rc_per_ue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "oran.rc_per_ue";
  }
  protected:
  explicit rc_per_ue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeIndexFieldNumber = 1,
    kMaxPrbFieldNumber = 2,
  };
  // int32 ue_index = 1;
  void clear_ue_index() ;
  ::int32_t ue_index() const;
  void set_ue_index(::int32_t value);

  private:
  ::int32_t _internal_ue_index() const;
  void _internal_set_ue_index(::int32_t value);

  public:
  // int32 max_prb = 2;
  void clear_max_prb() ;
  ::int32_t max_prb() const;
  void set_max_prb(::int32_t value);

  private:
  ::int32_t _internal_max_prb() const;
  void _internal_set_max_prb(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:oran.rc_per_ue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t ue_index_;
    ::int32_t max_prb_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rc_2eproto;
};// -------------------------------------------------------------------

class kpm_per_ue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oran.kpm_per_ue) */ {
 public:
  inline kpm_per_ue() : kpm_per_ue(nullptr) {}
  ~kpm_per_ue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR kpm_per_ue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  kpm_per_ue(const kpm_per_ue& from);
  kpm_per_ue(kpm_per_ue&& from) noexcept
    : kpm_per_ue() {
    *this = ::std::move(from);
  }

  inline kpm_per_ue& operator=(const kpm_per_ue& from) {
    CopyFrom(from);
    return *this;
  }
  inline kpm_per_ue& operator=(kpm_per_ue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const kpm_per_ue& default_instance() {
    return *internal_default_instance();
  }
  static inline const kpm_per_ue* internal_default_instance() {
    return reinterpret_cast<const kpm_per_ue*>(
               &_kpm_per_ue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(kpm_per_ue& a, kpm_per_ue& b) {
    a.Swap(&b);
  }
  inline void Swap(kpm_per_ue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(kpm_per_ue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  kpm_per_ue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<kpm_per_ue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const kpm_per_ue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const kpm_per_ue& from) {
    kpm_per_ue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(kpm_per_ue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "oran.kpm_per_ue";
  }
  protected:
  explicit kpm_per_ue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPktDropRateFieldNumber = 2,
    kPktVolumeFieldNumber = 3,
    kUeIndexFieldNumber = 1,
  };
  // double pkt_drop_rate = 2;
  void clear_pkt_drop_rate() ;
  double pkt_drop_rate() const;
  void set_pkt_drop_rate(double value);

  private:
  double _internal_pkt_drop_rate() const;
  void _internal_set_pkt_drop_rate(double value);

  public:
  // double pkt_volume = 3;
  void clear_pkt_volume() ;
  double pkt_volume() const;
  void set_pkt_volume(double value);

  private:
  double _internal_pkt_volume() const;
  void _internal_set_pkt_volume(double value);

  public:
  // int32 ue_index = 1;
  void clear_ue_index() ;
  ::int32_t ue_index() const;
  void set_ue_index(::int32_t value);

  private:
  ::int32_t _internal_ue_index() const;
  void _internal_set_ue_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:oran.kpm_per_ue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double pkt_drop_rate_;
    double pkt_volume_;
    ::int32_t ue_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// service_message

// int32 type = 1;
inline void service_message::clear_type() {
  _impl_.type_ = 0;
}
inline ::int32_t service_message::type() const {
  // @@protoc_insertion_point(field_get:oran.service_message.type)
  return _internal_type();
}
inline void service_message::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:oran.service_message.type)
}
inline ::int32_t service_message::_internal_type() const {
  return _impl_.type_;
}
inline void service_message::_internal_set_type(::int32_t value) {
  ;
  _impl_.type_ = value;
}

// repeated .oran.rc_per_ue ue_max_prb_allocations = 2;
inline int service_message::_internal_ue_max_prb_allocations_size() const {
  return _impl_.ue_max_prb_allocations_.size();
}
inline int service_message::ue_max_prb_allocations_size() const {
  return _internal_ue_max_prb_allocations_size();
}
inline void service_message::clear_ue_max_prb_allocations() {
  _internal_mutable_ue_max_prb_allocations()->Clear();
}
inline ::oran::rc_per_ue* service_message::mutable_ue_max_prb_allocations(int index) {
  // @@protoc_insertion_point(field_mutable:oran.service_message.ue_max_prb_allocations)
  return _internal_mutable_ue_max_prb_allocations()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oran::rc_per_ue >*
service_message::mutable_ue_max_prb_allocations() {
  // @@protoc_insertion_point(field_mutable_list:oran.service_message.ue_max_prb_allocations)
  return _internal_mutable_ue_max_prb_allocations();
}
inline const ::oran::rc_per_ue& service_message::_internal_ue_max_prb_allocations(int index) const {
  return _internal_ue_max_prb_allocations().Get(index);
}
inline const ::oran::rc_per_ue& service_message::ue_max_prb_allocations(int index) const {
  // @@protoc_insertion_point(field_get:oran.service_message.ue_max_prb_allocations)
  return _internal_ue_max_prb_allocations(index);
}
inline ::oran::rc_per_ue* service_message::_internal_add_ue_max_prb_allocations() {
  return _internal_mutable_ue_max_prb_allocations()->Add();
}
inline ::oran::rc_per_ue* service_message::add_ue_max_prb_allocations() {
  ::oran::rc_per_ue* _add = _internal_add_ue_max_prb_allocations();
  // @@protoc_insertion_point(field_add:oran.service_message.ue_max_prb_allocations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oran::rc_per_ue >&
service_message::ue_max_prb_allocations() const {
  // @@protoc_insertion_point(field_list:oran.service_message.ue_max_prb_allocations)
  return _internal_ue_max_prb_allocations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::oran::rc_per_ue>&
service_message::_internal_ue_max_prb_allocations() const {
  return _impl_.ue_max_prb_allocations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::oran::rc_per_ue>*
service_message::_internal_mutable_ue_max_prb_allocations() {
  return &_impl_.ue_max_prb_allocations_;
}

// repeated .oran.kpm_per_ue ue_kpb_metrics = 3;
inline int service_message::_internal_ue_kpb_metrics_size() const {
  return _impl_.ue_kpb_metrics_.size();
}
inline int service_message::ue_kpb_metrics_size() const {
  return _internal_ue_kpb_metrics_size();
}
inline void service_message::clear_ue_kpb_metrics() {
  _internal_mutable_ue_kpb_metrics()->Clear();
}
inline ::oran::kpm_per_ue* service_message::mutable_ue_kpb_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:oran.service_message.ue_kpb_metrics)
  return _internal_mutable_ue_kpb_metrics()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oran::kpm_per_ue >*
service_message::mutable_ue_kpb_metrics() {
  // @@protoc_insertion_point(field_mutable_list:oran.service_message.ue_kpb_metrics)
  return _internal_mutable_ue_kpb_metrics();
}
inline const ::oran::kpm_per_ue& service_message::_internal_ue_kpb_metrics(int index) const {
  return _internal_ue_kpb_metrics().Get(index);
}
inline const ::oran::kpm_per_ue& service_message::ue_kpb_metrics(int index) const {
  // @@protoc_insertion_point(field_get:oran.service_message.ue_kpb_metrics)
  return _internal_ue_kpb_metrics(index);
}
inline ::oran::kpm_per_ue* service_message::_internal_add_ue_kpb_metrics() {
  return _internal_mutable_ue_kpb_metrics()->Add();
}
inline ::oran::kpm_per_ue* service_message::add_ue_kpb_metrics() {
  ::oran::kpm_per_ue* _add = _internal_add_ue_kpb_metrics();
  // @@protoc_insertion_point(field_add:oran.service_message.ue_kpb_metrics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oran::kpm_per_ue >&
service_message::ue_kpb_metrics() const {
  // @@protoc_insertion_point(field_list:oran.service_message.ue_kpb_metrics)
  return _internal_ue_kpb_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::oran::kpm_per_ue>&
service_message::_internal_ue_kpb_metrics() const {
  return _impl_.ue_kpb_metrics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::oran::kpm_per_ue>*
service_message::_internal_mutable_ue_kpb_metrics() {
  return &_impl_.ue_kpb_metrics_;
}

// -------------------------------------------------------------------

// rc_per_ue

// int32 ue_index = 1;
inline void rc_per_ue::clear_ue_index() {
  _impl_.ue_index_ = 0;
}
inline ::int32_t rc_per_ue::ue_index() const {
  // @@protoc_insertion_point(field_get:oran.rc_per_ue.ue_index)
  return _internal_ue_index();
}
inline void rc_per_ue::set_ue_index(::int32_t value) {
  _internal_set_ue_index(value);
  // @@protoc_insertion_point(field_set:oran.rc_per_ue.ue_index)
}
inline ::int32_t rc_per_ue::_internal_ue_index() const {
  return _impl_.ue_index_;
}
inline void rc_per_ue::_internal_set_ue_index(::int32_t value) {
  ;
  _impl_.ue_index_ = value;
}

// int32 max_prb = 2;
inline void rc_per_ue::clear_max_prb() {
  _impl_.max_prb_ = 0;
}
inline ::int32_t rc_per_ue::max_prb() const {
  // @@protoc_insertion_point(field_get:oran.rc_per_ue.max_prb)
  return _internal_max_prb();
}
inline void rc_per_ue::set_max_prb(::int32_t value) {
  _internal_set_max_prb(value);
  // @@protoc_insertion_point(field_set:oran.rc_per_ue.max_prb)
}
inline ::int32_t rc_per_ue::_internal_max_prb() const {
  return _impl_.max_prb_;
}
inline void rc_per_ue::_internal_set_max_prb(::int32_t value) {
  ;
  _impl_.max_prb_ = value;
}

// -------------------------------------------------------------------

// kpm_per_ue

// int32 ue_index = 1;
inline void kpm_per_ue::clear_ue_index() {
  _impl_.ue_index_ = 0;
}
inline ::int32_t kpm_per_ue::ue_index() const {
  // @@protoc_insertion_point(field_get:oran.kpm_per_ue.ue_index)
  return _internal_ue_index();
}
inline void kpm_per_ue::set_ue_index(::int32_t value) {
  _internal_set_ue_index(value);
  // @@protoc_insertion_point(field_set:oran.kpm_per_ue.ue_index)
}
inline ::int32_t kpm_per_ue::_internal_ue_index() const {
  return _impl_.ue_index_;
}
inline void kpm_per_ue::_internal_set_ue_index(::int32_t value) {
  ;
  _impl_.ue_index_ = value;
}

// double pkt_drop_rate = 2;
inline void kpm_per_ue::clear_pkt_drop_rate() {
  _impl_.pkt_drop_rate_ = 0;
}
inline double kpm_per_ue::pkt_drop_rate() const {
  // @@protoc_insertion_point(field_get:oran.kpm_per_ue.pkt_drop_rate)
  return _internal_pkt_drop_rate();
}
inline void kpm_per_ue::set_pkt_drop_rate(double value) {
  _internal_set_pkt_drop_rate(value);
  // @@protoc_insertion_point(field_set:oran.kpm_per_ue.pkt_drop_rate)
}
inline double kpm_per_ue::_internal_pkt_drop_rate() const {
  return _impl_.pkt_drop_rate_;
}
inline void kpm_per_ue::_internal_set_pkt_drop_rate(double value) {
  ;
  _impl_.pkt_drop_rate_ = value;
}

// double pkt_volume = 3;
inline void kpm_per_ue::clear_pkt_volume() {
  _impl_.pkt_volume_ = 0;
}
inline double kpm_per_ue::pkt_volume() const {
  // @@protoc_insertion_point(field_get:oran.kpm_per_ue.pkt_volume)
  return _internal_pkt_volume();
}
inline void kpm_per_ue::set_pkt_volume(double value) {
  _internal_set_pkt_volume(value);
  // @@protoc_insertion_point(field_set:oran.kpm_per_ue.pkt_volume)
}
inline double kpm_per_ue::_internal_pkt_volume() const {
  return _impl_.pkt_volume_;
}
inline void kpm_per_ue::_internal_set_pkt_volume(double value) {
  ;
  _impl_.pkt_volume_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace oran


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_rc_2eproto_2epb_2eh
